#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1        &kp N2        &kp N3     &kp N4      &kp N5       &kp UP_ARROW     &kp N6           &kp N7         &kp N8     &kp N9            &kp N0             &kp MINUS
&kp TAB     &kp Q         &kp W         &kp E      &kp R       &kp T        &kp DOWN_ARROW   &kp Y            &kp U          &kp I      &kp O             &kp P              &kp BSLH
&mo 1       &kp A         &kp S         &kp D      &kp F       &kp G        &kp LEFT_ARROW   &kp H            &kp J          &kp K      &kp L             &kp SEMI           &kp APOS
&kp LSHFT   &kp Z         &kp X         &kp C      &kp V       &kp B        &kp RIGHT_ARROW  &kp N            &kp M          &kp COMMA  &kp DOT           &kp FSLH           &kp EQUAL
&kp C_MUTE  &kp LEFT_WIN  &kp LEFT_ALT  &kp SPACE  &kp DELETE  &kp LCTRL    &kp ENTER        &kp PRINTSCREEN  &kp BACKSPACE  &kp ENTER  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6      &kp F7      &kp F8      &kp F9     &kp F10         &kp F11
&kp TILDE   &kp HOME         &kp UP_ARROW     &kp END          &rgb_ug RGB_HUI  &rgb_ug RGB_BRI    &mmv MOVE_DOWN   &kp C_PP    &kp END     &kp UP      &kp HOME   &kp MINUS       &kp F12
&trans      &kp LEFT         &kp DOWN_ARROW   &kp RIGHT        &rgb_ug RGB_HUD  &rgb_ug RGB_BRD    &mmv MOVE_LEFT   &kp C_MUTE  &kp LEFT    &kp DOWN    &kp RIGHT  &trans          &kp RIGHT_BRACKET
&kp CAPS    &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &bt BT_NXT  &bt BT_PRV  &kp INSERT  &kp F11    &trans          &trans
&kp C_MUTE  &trans           &trans           &trans           &trans           &trans             &mkp LCLK        &trans      &trans      &trans      &trans     &bt BT_CLR_ALL
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
